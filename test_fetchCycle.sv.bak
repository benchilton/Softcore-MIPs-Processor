module test_fetchCycle;

parameter instructLen = 32;
parameter size = 32;
parameter addsize = $clog2(size);

logic clk, n_rst, writeProgram, branch;
logic [instructLen-1:0] wInstruction;
logic [addsize-1:0] address;//Address to get the instruction from.
logic [addsize-1:0] wAddress;//Address to write the program to
logic [instructLen-1:0] fetchInst;//Fetched Instruction
logic [addsize-1:0] branchVal;

logic [5:0] opcode;
logic [4:0] rt, rs, rd;
logic [15:0] immediate;
logic [25:0] insAddress;

//Writes to the program memory a basic instruction
machineCode #(.instructLen(instructLen), .size(size)) mc1 (.wE(writeProgram), .address(wAddress), .wInstruction(wInstruction));
branchControl bc1 (.branch(branch), .jump(jump), .zero(zero), .PC_Count(newCount), .immediate(immediate), .newPC_Count(address), .save_PC(save_PC));

programCounter #(.size(32)) pC1 (.clk(clk), .n_rst(n_rst), .newCount(PC_Count), .address(address));

programMemory 	pM1 (.clk(clk), .writeEnable(writeProgram), .writeInstruction(wInstruction), .address(address)
		, .wAddress(wAddress), .outInstruct(fetchInst));

instructionRegister #(.instructLen(instructLen)) iR1 (.clk(clk), .inputInstruction(fetchInst), .address(insAddress), .*);

initial
begin
	clk = '1;
	forever #10ns clk = ~clk;
end

initial
begin
	n_rst = '1;
	#1ns n_rst = '0;
	#1ns n_rst = '1;
end

initial
begin
	branch = '0;
	branchVal = 0;
	#200ns
	branch = '1;
	branchVal = 3;
	#20ns
	branch = '0;
	branchVal = 0;
end

endmodule